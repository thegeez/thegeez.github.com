<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>thegeez blog</title>
 <link rel="self" href="http://thegeez.github.com/atom.xml" />
 <link href="http://thegeez.github.com/" />
 <updated>2012-03-15T20:06:09Z</updated>
 <id>http://thegeez.github.com/</id>
 <author>
   <name>Gijs Stuurman</name>
 </author>
 <entry>
   <title>Simple static blog with Clojure</title>
   <link href="http://thegeez.github.com/2012/03/15/static_blog_on_github_with_enlive.html" />
   <updated>2012-03-15T00:00:00Z</updated>
   <id>http://thegeez.github.com/2012/03/15/static_blog_on_github_with_enlive.html</id>
   <content type="html">&lt;html&gt;&lt;body&gt;&lt;h1 id="post-title"&gt;Simple static blog with Clojure&lt;/h1&gt;
&lt;p&gt;This inaugural post for this Clojure blog describes how it is
created. This blog is hosted by GitHub Pages and the static pages are
generated by a minimal clone for Jekyll written in Clojure and
using Enlive. The code is by no means a replacement for Jekyll, but
can serve as a starting point for people wanting to do the same.&lt;/p&gt;

&lt;p&gt;The code for the static pages generator is in the &lt;a href="https://github.com/thegeez/clj-static-blog"&gt;clj-static-blog&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pages.github.com"&gt;Github Pages&lt;/a&gt; can host static pages under username.github.com.
Their suggested method to generate static pages is with &lt;a href="http://github.com/mojombo/jekyll/"&gt;Jekyll&lt;/a&gt;. As I
could not get Jekyll to run, I had enough of an excuse to use Clojure
and Enlive for the task.&lt;/p&gt;

&lt;p&gt;
What clj-static-blog does:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Put each post in a template with a header and footer&lt;/li&gt;
&lt;li&gt;Create an index.html with a list of posts&lt;/li&gt;
&lt;li&gt;Create an atom rss feed whit a list of posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also includes a small webserver to browse the generated pages
locally. GitHub Pages runs Jekyll when changes are pushed to a pages
repository. For this blog the static pages are checked-in,
rather than the sources, because the generator is not run on
GitHub. The Jekyll processing is disabled by the .nojekyll file in
this repo.&lt;/p&gt;

&lt;p&gt;The core of clj-static-blog is the Enlive library. &lt;a href="https://github.com/cgrand/enlive"&gt;Enlive&lt;/a&gt; is a
selector-based (Ã  la CSS) templating library for Clojure, by
  Christophe Grand. The readme of Enlive points to two good
tutorials. Here I just want to highlight to core functionality of
Enlive.&lt;/p&gt;

&lt;p&gt;Enlive does selection and transformations. Using only the
selectors Enlive can be used to scrape websites. With the addition of
transformations Enlive can be used for HTML templating.&lt;/p&gt;

&lt;pre&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;html is seq of {:tag :attrs :content}
&lt;/span&gt;&lt;span class="esk-paren"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function-name"&gt;html&lt;/span&gt; &lt;span class="esk-paren"&gt;(&lt;/span&gt;html-resource 
            &lt;span class="esk-paren"&gt;(&lt;/span&gt;io/file &lt;span class="string"&gt;"/source/_postlist.html"&lt;/span&gt;&lt;span class="esk-paren"&gt;)))&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;=&amp;gt; ({:tag :html, :attrs nil, :content ({:tag :body, :attrs ...
&lt;/span&gt;  
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;back to textual html again
&lt;/span&gt;&lt;span class="esk-paren"&gt;(&lt;/span&gt;emit* html&lt;span class="esk-paren"&gt;)&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;=&amp;gt; ("&amp;lt;" "html" "&amp;gt;" "&amp;lt;" "body" "&amp;gt;" "&amp;lt;" "div" " " "id" "=\"" ...
&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;back to a string
&lt;/span&gt;&lt;span class="esk-paren"&gt;(&lt;/span&gt;&lt;span class="builtin"&gt;apply&lt;/span&gt; str &lt;span class="esk-paren"&gt;(&lt;/span&gt;emit* html&lt;span class="esk-paren"&gt;))&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;=&amp;gt; "&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div id=\"home.....
&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;select a seq of nodes from html with the css-like selector
&lt;/span&gt;&lt;span class="esk-paren"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function-name"&gt;date-node&lt;/span&gt; &lt;span class="esk-paren"&gt;(&lt;/span&gt;&lt;span class="type"&gt;select&lt;/span&gt; html [&lt;span class="builtin"&gt;:div.date&lt;/span&gt;]&lt;span class="esk-paren"&gt;))&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;=&amp;gt; ({:tag :div, :attrs {:class "date"}, :content ("YYYY/MM/DD")})
&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;tranform applies a transformation to a node
&lt;/span&gt;&lt;span class="esk-paren"&gt;(&lt;/span&gt;transform date-node
           [&lt;span class="builtin"&gt;:div.date&lt;/span&gt;]
           &lt;span class="esk-paren"&gt;(&lt;/span&gt;&lt;span class="builtin"&gt;fn&lt;/span&gt; [match]
             &lt;span class="esk-paren"&gt;(&lt;/span&gt;&lt;span class="builtin"&gt;assoc&lt;/span&gt; match &lt;span class="builtin"&gt;:content&lt;/span&gt; &lt;span class="string"&gt;"2012/03/15"&lt;/span&gt;&lt;span class="esk-paren"&gt;)))&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;=&amp;gt; ({:tag :div, :attrs {:class "date"}, :content "2012/03/15"})
&lt;/span&gt;  
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;the results of a transformation may also be a seq of nodes
&lt;/span&gt;&lt;span class="esk-paren"&gt;(&lt;/span&gt;transform date-node
           [&lt;span class="builtin"&gt;:div.date&lt;/span&gt;]
           &lt;span class="esk-paren"&gt;(&lt;/span&gt;&lt;span class="builtin"&gt;fn&lt;/span&gt; [match-node]
             [{&lt;span class="builtin"&gt;:tag&lt;/span&gt; &lt;span class="string"&gt;"hr"&lt;/span&gt; &lt;span class="builtin"&gt;:attrs&lt;/span&gt; nil &lt;span class="builtin"&gt;:content&lt;/span&gt; []}
              {&lt;span class="builtin"&gt;:tag&lt;/span&gt; &lt;span class="string"&gt;"p"&lt;/span&gt; &lt;span class="builtin"&gt;:attrs&lt;/span&gt; nil &lt;span class="builtin"&gt;:content&lt;/span&gt; &lt;span class="string"&gt;"new structure"&lt;/span&gt;}]&lt;span class="esk-paren"&gt;))&lt;/span&gt;
&lt;span class="comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="comment"&gt;=&amp;gt;
  ({:tag "hr", :attrs nil, :content []} 
   {:tag "p", :content "new structure", :attrs nil})
&lt;/span&gt;  &lt;/pre&gt;
&lt;p&gt;This code is also in clj-static-blog/src/clj_static_blog/core.clj.&lt;/p&gt;





&lt;/body&gt;&lt;/html&gt;</content>
 </entry>

</feed>