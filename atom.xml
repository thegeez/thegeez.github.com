<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>thegeez blog</title>
 <link rel="self" href="http://thegeez.github.com/atom.xml" />
 <link href="http://thegeez.github.com/" />
 <updated>2014-01-10T16:11:26Z</updated>
 <id>http://thegeez.github.com/</id>
 <author>
   <name>Gijs Stuurman</name>
 </author>
 <entry>
   <title>Solving 4clojure problems in an editor</title>
   <link href="http://thegeez.github.com/2014/01/10/4clojure_in_editor.html" />
   <updated>2014-01-10T23:00:00Z</updated>
   <id>http://thegeez.github.com/2014/01/10/4clojure_in_editor.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Solving 4clojure problems in an editor&lt;/h1&gt;

&lt;p&gt;On
 Twitter &lt;a href="https://twitter.com/xeqixeqi/status/421323628190244865"&gt;xeqixeqi&lt;/a&gt;
 asked for a leiningen template to be able to solve to the problems
 from &lt;a href="http://www.4clojure.org"&gt;4clojure&lt;/a&gt; in an editor rather
 than the browser. He then solved this problem himself by building a
 &lt;a href="https://github.com/xeqi/foreclojure"&gt;lein template for
 4clojure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I did most of the problems in emacs by copy-pasting the
  test cases from each problem page. To turn the text on
  4clojure into a runnable test I used this
  utility: &lt;a href="https://gist.github.com/thegeez/8352754"&gt;gist:
  4clojure in editor&lt;/a&gt;.&lt;/p&gt;
&lt;a href="2014/01/10/4clojure_in_editor.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Vintage JavaScript game restoration</title>
   <link href="http://thegeez.github.com/2013/12/30/vintage_javascript_game_restoration.html" />
   <updated>2013-12-30T23:00:00Z</updated>
   <id>http://thegeez.github.com/2013/12/30/vintage_javascript_game_restoration.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Vintage JavaScript game restoration&lt;/h1&gt;

&lt;p&gt;At a recent &lt;a href="http://amsclj.nl/"&gt;Amsterdam Clojurians meetup&lt;/a&gt; the topic was game
  development. Some of the first code I played around with in high school were games
  in JavaScript. These games were great as an introduction to programming
  because all that is needed to play around with them is a browser, 'view source' and
  notepad. My favorite JavaScript games then were made by
  K. Moriyama. His site from 1996 is still available online today in
  its original
  form: &lt;a href="http://plaza.harmonix.ne.jp/~jimmeans/"&gt;K. Moriyama's
  Home Page&lt;/a&gt;, including a matrix led visitor counter and gradient
  word-art like header.&lt;/p&gt;

&lt;p&gt;Mr. Moriyama took great care to make sure his games were playable
  on most browsers, including Internet Explorer 4 and Netscape
  Navigator 3. Sadly, current browsers cannot run the JavaScript
  anymore. The game I like most
  is &lt;a href="http://plaza.harmonix.ne.jp/~jimmeans/falcon/"&gt;JS
  Falcon&lt;/a&gt;. To be able to play this game again I have dusted of the
  old JavaScript. All that needed changing were some DOM traversal
  paths and the main loop's update interval. The server-side high
  score bookkeeping has been removed from this version.&lt;/p&gt;

&lt;a href="2013/12/30/vintage_javascript_game_restoration.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Testing RxJava with executable marble
  diagrams</title>
   <link href="http://thegeez.github.com/2013/03/25/neflix_rxjava_marble.html" />
   <updated>2013-03-25T23:00:00Z</updated>
   <id>http://thegeez.github.com/2013/03/25/neflix_rxjava_marble.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Testing RxJava with executable marble
  diagrams&lt;/h1&gt;
&lt;p&gt;Reactive Extensions (Rx) from the .Net world are observable
  sequences. In particular they are push based sequences, in contrast
  to the pull based seq api in Clojure. Furthermore you can subscribe
  to and
  unsubscribe from observable sequences. This also makes observable
  sequences a nice candidate to replace futures and callbacks in
  asynchronous code.&lt;br /&gt;&lt;br /&gt;

For more information see any of the following resources:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Rx (Reactive Extensions) &lt;a href="http://rx.codeplex.com/"&gt;.Net Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erik Meijer (Rx creator) explains Rx &lt;a href="http://channel9.msdn.com/blogs/charles/erik-meijer-rx-in-15-minutes"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Intro to Rx &lt;a href="http://www.introtorx.com/"&gt;Free html ebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular the "Intro to Rx" book is a great resource. Every other
example will have you wishing to be able to use Rx in Clojure. Luckily
Netflix recently open sourced their Java variation of Rx called RxJava.&lt;/p&gt;&lt;a href="2013/03/25/neflix_rxjava_marble.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Haskell Picnic</title>
   <link href="http://thegeez.github.com/2013/01/20/haskell_picnic.html" />
   <updated>2013-01-20T23:00:00Z</updated>
   <id>http://thegeez.github.com/2013/01/20/haskell_picnic.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Haskell Picnic&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://lisperati.com/haskell/"&gt;PicnicMob&lt;/a&gt; is a Haskell
  tutorial for beginners. It is different from many other
  introductory tutorials as it has an interesting,
non-trivial algorithm as the subject and it produces pictures at every
step. Also you can't go wrong by reading something by Conrad Barski,
author of &lt;a href="http://landoflisp.com/"&gt;Land of Lisp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I worked through the tutorial when I was still at university. The
  picnic placement pictures I first generated are from 2009. I
  revisited the tutorial to read up on the &lt;a href="http://en.wikipedia.org/wiki/Simulated_annealing"&gt;simulated annealing&lt;/a&gt;
  algorithm that is used. Along the way I ported the code to Clojure and this code
  is on GitHub &lt;a href="https://gist.github.com/4580548"&gt;here&lt;/a&gt;. The Clojure code follows the Haskell code quite
  closely. As with the original tutorial the Clojure code is
  inefficient with its use of datastructures and its algorithmic complexity.&lt;/p&gt;


&lt;a href="2013/01/20/haskell_picnic.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>October Amsterdam Clojure Presentation</title>
   <link href="http://thegeez.github.com/2012/10/28/october_amsterdam_clojure.html" />
   <updated>2012-10-28T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/10/28/october_amsterdam_clojure.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;October Amsterdam Clojure Presentation&lt;/h1&gt;

&lt;p&gt;The slides from my presentation
  at &lt;a href="http://amsclj.nl/october.html"&gt;#OctAmsClj&lt;/a&gt; are in the ams-clj repo: &lt;a href="https://github.com/ams-clj/octamsclj-2012/"&gt;Simpler webapps with Clojure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code for the example in the presentation is here: &lt;a href="https://github.com/thegeez/amscljoct-example"&gt;amscljoct-example&lt;/a&gt;.&lt;/p&gt;
&lt;a href="2012/10/28/october_amsterdam_clojure.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Count aggregator in Cascalog</title>
   <link href="http://thegeez.github.com/2012/08/26/cascalog_clojure_count.html" />
   <updated>2012-08-26T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/08/26/cascalog_clojure_count.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Count aggregator in Cascalog&lt;/h1&gt;

&lt;p&gt;At my current job we use the excellent &lt;a href="https://github.com/nathanmarz/cascalog"&gt;Cascalog&lt;/a&gt; library. Cascalog
  is a declarative query language for "Big Data" processing on top of
  Hadoop. Cascalog queries get compiled into MapReduce tasks (through
  the underlying &lt;a href="http://www.cascading.org/"&gt;Cascading&lt;/a&gt; library). This approach is a huge win over
  writing MapReduce tasks yourself. The "Hello World" of MapReduce
  tasks is the &lt;a href="http://wiki.apache.org/hadoop/WordCount"&gt;word-count&lt;/a&gt; example. However this example is a bit
  deceptive as it consists of only one Map task and one Reduce task.
  Most queries that we run require multiple MapReduce tasks chained
  together. With Cascalog we write a query declaratively
  while the underlying libraries take care to create (efficient!)
  chains of MapReduce tasks.&lt;/p&gt;

&lt;p&gt;In the beginning I struggled with writing Cascalog queries with
  aggregators. The best example of this is the count aggregator. The
  following code uses "count" in Cascalog and SQL.&lt;/p&gt;

&lt;a href="2012/08/26/cascalog_clojure_count.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Testing clj-browserchannel</title>
   <link href="http://thegeez.github.com/2012/07/10/test_selenium_browserchannel.html" />
   <updated>2012-07-10T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/07/10/test_selenium_browserchannel.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Testing clj-browserchannel&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://github.com/thegeez/clj-browserchannel"&gt;clj-browserchannel&lt;/a&gt; project now also contains a test
  project. The &lt;a href="https://github.com/thegeez/clj-browserchannel/tree/master/test"&gt;test project&lt;/a&gt; contains a small executable test that
  tests the whole browserchannel stack, by using the &lt;a href="https://github.com/thegeez/clj-browserchannel/tree/master/chat-demo"&gt;chat-demo&lt;/a&gt;
  application. The test project is meant to test the server-side
  component of the BrowserChannel protocol in
  clj-browserchannel. Together with the client-side implementation as
  part of the Google Closure library this provides real-time
  bi-directional communication for web apps.&lt;/p&gt;

&lt;p&gt;The test is done by mimicking people chatting in the chat-demo
  application. Testing the server component in clj-browserchannel by
  itself is nearly impossible. This is because the server-side is
  fully dependent on cooperation with the client-side to comply to
  the BrowserChannel protocol. However both the protocol and the
  client-side implementation are very sparsely documented. The
  client-side implementation is a black box that can not easily be
  mocked or stubbed. Therefore the approach is to do &lt;a href="http://thinkrelevance.com/blog/2012/04/26/thinkrelevance-the-podcast-episode-010-stu-halloway"&gt;simulation testing&lt;/a&gt;.&lt;/p&gt;

&lt;a href="2012/07/10/test_selenium_browserchannel.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>My understanding of reducers after
  EuroClojure</title>
   <link href="http://thegeez.github.com/2012/06/12/euroclojure_reducers.html" />
   <updated>2012-06-12T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/06/12/euroclojure_reducers.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;My understanding of reducers after
  EuroClojure&lt;/h1&gt;

&lt;p&gt;At EuroClojure Rich Hickey gave a second, unscheduled talk about the new
  reducers library. The talk clarified a few points for me, that I
  didn't initially get from the explaining blogposts on
  &lt;a href="http://clojure.com/blog"&gt;clojure.com/blog&lt;/a&gt;. For the &lt;a href="http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/"&gt;Amsterdam Clojure Meetup&lt;/a&gt; I wrote down
  these notes:&lt;/p&gt;

&lt;h2&gt;Reducers vs seq/lazy-seq api&lt;/h2&gt; 
&lt;a href="2012/06/12/euroclojure_reducers.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Playing "Racket Gin Rummy in ClojureScript" with
  Clojure</title>
   <link href="http://thegeez.github.com/2012/06/01/ginbot_euroclojure.html" />
   <updated>2012-06-01T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/06/01/ginbot_euroclojure.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Playing "Racket Gin Rummy in ClojureScript" with
  Clojure&lt;/h1&gt;

&lt;p&gt;In 2010 I built my first real Clojure application. It was a tool to
execute semantic specifications of modeling languages and was part of
my master thesis. Before I decided
to use Clojure for this tool I built a little program to test the
waters. This program was &lt;a href="https://github.com/thegeez/clj-ginbot"&gt;GinBot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whilst dabbling with functional programming languages I tried PLT
Scheme (now &lt;a href="http://racket-lang.org"&gt;PLT Racket&lt;/a&gt;). As part of the DrScheme editor came a couple
of example games. My favorite is the Gin Rummy card game. The object of this game is to make a hand of 10 cards,
  consisting of a set of four cards and two sets of three cards. Players take turns and can choose to pick the top card of the
  discard pile or a face down card from the deck. For more information see the
  rules for Gin Rummy in the &lt;a href="http://docs.racket-lang.org/games/ginrummy.html"&gt; Racket
  documentation&lt;/a&gt;.&lt;/p&gt;

&lt;a href="2012/06/01/ginbot_euroclojure.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>BrowserChannel and the Rijksmuseum API at
  The Next Web HackBattle</title>
   <link href="http://thegeez.github.com/2012/05/16/the_next_web_rijksmuseum.html" />
   <updated>2012-05-16T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/05/16/the_next_web_rijksmuseum.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;BrowserChannel and the Rijksmuseum API at
  The Next Web HackBattle&lt;/h1&gt;

&lt;p&gt;The
  last &lt;a href="http://thenextweb.com/conference/amsterdam/2012/"&gt;The
  Next Web conference&lt;/a&gt; in Amsterdam on the 23rd to 25th of April
  2012 included a two
  day &lt;a href="http://thenextweb.com/conference/amsterdam/2012/hackbattle"&gt;HackBattle&lt;/a&gt;. During
  this HackBattle I built a website combining the API from the
  &lt;a href="http://www.rijksmuseum.nl/api"&gt;Rijksmuseum&lt;/a&gt; with my
  &lt;a href="https://github.com/thegeez/clj-browserchannel"&gt;clj-browserchannel&lt;/a&gt;
  library.&lt;/p&gt;

&lt;p&gt;The Rijksmuseum API contains all the works from the museum in
  digital format, with loads of metadata. The website I build displays
  a selection from these works and allows people to add 'notes' to the
  paintings. When a note is placed, everybody looking at that painting
  will see the note pop-up on the site. The idea behind this was that
  this could be used in a group tour setting through the museum. Of
  course the real-time aspect of the website is provided by
  clj-browserchannel. This group tour aspect is also the motivation
  behind the simple design of the website, which makes it usable on at
  least Android smartphones.
&lt;/p&gt;

&lt;a href="2012/05/16/the_next_web_rijksmuseum.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Why BrowserChannel?</title>
   <link href="http://thegeez.github.com/2012/04/03/why_browserchannel.html" />
   <updated>2012-04-03T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/04/03/why_browserchannel.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Why BrowserChannel?&lt;/h1&gt;
&lt;p&gt;After the release
  of &lt;a href="https://github.com/thegeez/clj-browserchannel-demo"&gt;clj-browserchannel-demo&lt;/a&gt;,
  I have been asked what BrowserChannel is exactly. This post will
  hopefully clarify what BrowserChannel is and why it is a great fit
  for ClojureScript and Clojure web applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://closure-library.googlecode.com/svn-history/r144/docs/closure_goog_net_browserchannel.js.html"&gt;BrowserChannel&lt;/a&gt; is a protocol developed by Google. It provides cross-browser compatible, real-time, bi-directional communication
  for various Google web apps, including Google Docs and GMail.&lt;/p&gt;

&lt;a href="2012/04/03/why_browserchannel.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Racket Gin Rummy in ClojureScript</title>
   <link href="http://thegeez.github.com/2012/03/20/racket_gin_clojurescript.html" />
   <updated>2012-03-20T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/03/20/racket_gin_clojurescript.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Racket Gin Rummy in ClojureScript&lt;/h1&gt;
&lt;p&gt;A ClojureScript implementation of a simple card game. The game can
  be played &lt;a href="http://thegeez-gin.s3-website-eu-west-1.amazonaws.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Racket programming environment comes with a couple of example
  games written in Scheme. My favorite of these games is Gin
  Rummy. The object of this game is to make a hand of 10 cards,
  consisting of a set of four cards and two sets of three cards. A set
  of cards are cards of the same rank (i.e. three Jacks) or subsequent
  cards of the same suit (i.e. 8,9,10,J of hearts). An ace can be low
  or high. The game has two players with ten cards each. In the middle
  are the deck of cards faced down and a discard pile, with cards face
  up. Players take turns and can choose to pick to top card of the
  discard pile or a face down card from the deck. The chosen card has
  to be exchanged for a card in the players hand, which is placed on
  top of the discard pile. For more information see the
  &lt;a href="http://docs.racket-lang.org/games/ginrummy.html"&gt; Racket documentation&lt;/a&gt;.&lt;/p&gt;

&lt;a href="2012/03/20/racket_gin_clojurescript.html"&gt;Read more&lt;/a&gt;</content>
 </entry><entry>
   <title>Simple static blog with Clojure</title>
   <link href="http://thegeez.github.com/2012/03/15/static_blog_on_github_with_enlive.html" />
   <updated>2012-03-15T23:00:00Z</updated>
   <id>http://thegeez.github.com/2012/03/15/static_blog_on_github_with_enlive.html</id>
   <content type="html">&lt;h1 id="post-title"&gt;Simple static blog with Clojure&lt;/h1&gt;
&lt;p&gt;This inaugural post for this Clojure blog describes how it is
created. This blog is hosted by GitHub Pages and the static pages are
generated by a minimal clone for Jekyll written in Clojure and
using Enlive. The code is by no means a replacement for Jekyll, but
can serve as a starting point for people wanting to do the same.&lt;/p&gt;

&lt;p&gt;The code for the static pages generator is in the &lt;a href="https://github.com/thegeez/clj-static-blog"&gt;clj-static-blog&lt;/a&gt; project.&lt;/p&gt;

&lt;a href="2012/03/15/static_blog_on_github_with_enlive.html"&gt;Read more&lt;/a&gt;</content>
 </entry>

</feed>